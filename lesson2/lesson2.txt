+--------------------------------------------------------+
| Lesson #2: Header Files, Libraries, Structs, Segfaults |
+--------------------------------------------------------+

======================
Act 1: Large projects
======================

> The compiler works in (at least) two stages:
    1) Convert each function's code into binary
    2) Link all the function calls to the functions themselves
  Let's see this in action.

> Open mymath.c to see some very simply maths functions.

> Let's make gcc only do the first stage, but not the second stage, by using
  gcc's -c option. The output will be a so-called "object file", with the .o
  extension.

  $ gcc -c mymath.c

> Let's now try to write a bonafide program that uses the functions we just
  wrote. We're going to do this the WRONG way first. Open up mymath_program.c
  and insert the line

    #include "mymath.c"

  Make sure you use "..." instead of <...>. Both of them have the same
  function, namely, to insert the contents of the named file; the difference
  is that <...> will tell the compiler to look first in the standard places
  for the file (like /usr/lib, /usr/local/lib, etc.), whereas "..." will make
  the compiler look in the current directory first, before looking in the
  standard places.

> Why is this the wrong way? I guess because if you had a complicated project
  that involved many different programs all importing "mymath.c", you are
  essentially getting the compiler to recompile the contents of "mymath.c"
  many times over, whereas the cleaner, more efficient way of doing it would
  be to compile the "mymath.c" code just once, and then link it to all the
  other functions that need it. So let's do it that way.

> Now let's make a header file for mymath.c. Start a new file, "mymath.h", and
  write the following in it:
  +-----------------------------------------+
  | #ifndef MYMATH_H                        |
  | #define MYMATH_H                        |
  |                                         |
  | /* Function prototypes */               |
  | double add     ( double, double );      |
  | double subtract( double, double );      |
  | double multiply( double, double );      |
  | double divide  ( double, double );      |
  |                                         |
  | #endif                                  |
  +-----------------------------------------+
  The reason for the #ifndef, etc., is to avoid the possibility of importing
  the header file more than once into the same source file (which would result
  in errors about having multiple definitions of the same functions). You can
  treat the first two lines and the last line as boiler-plate code that you
  should include in all your header files.

> Now change mymath_program.c so that it includes the header file instead of
  the source file:

    #include "mymath.h"

  Now, when we do the first stage of compiling for mymath_program.c, only the
  parts source code in our main function will be compiled into binary, because
  mymath_program.c can't "see" the source code for the functions, and can only
  see the function prototypes.

  $ gcc -c mymath_program.c

> At this point, you should have two object files:
    1) mymath.o
    2) mymath_program.o
  Let's link them together:

  $ gcc mymath_program.o mymath.o -o mymath_program

> And now we've done the whole compilation "manually", as it were. We COULD
achieved the ... <ORDER MATTERS>
