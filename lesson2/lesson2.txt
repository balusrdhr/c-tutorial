+--------------------------------------------------------+
| Lesson #2: Header Files, Libraries, Structs, Segfaults |
+--------------------------------------------------------+

======================
Act 1: Large projects
======================

> The compiler works in (at least) two stages:
    1) Convert each function's code into binary
    2) Link all the function calls to the functions themselves
  Let's see this in action.

> Open mymath.c to see some very simply maths functions.

> Let's make gcc only do the first stage, but not the second stage, by using
  gcc's -c option. The output will be a so-called "object file", with the .o
  extension.

  $ gcc -c mymath.c

> Let's now try to write a bonafide program that uses the functions we just
  wrote. We're going to do this the WRONG way first. Open up mymath_program.c
  and insert the line

    #include "mymath.c"

  Make sure you use "..." instead of <...>. Both of them have the same
  function, namely, to insert the contents of the named file; the difference
  is that <...> will tell the compiler to look first in the standard places
  for the file (like /usr/lib, /usr/local/lib, etc.), whereas "..." will make
  the compiler look in the current directory first, before looking in the
  standard places.

> Why is this the wrong way? I guess because if you had a complicated project
  that involved many different programs all importing "mymath.c", you are
  essentially getting the compiler to recompile the contents of "mymath.c"
  many times over, whereas the cleaner, more efficient way of doing it would
  be to compile the "mymath.c" code just once, and then link it to all the
  other functions that need it. So let's do it that way.

> Now let's make a header file for mymath.c. Start a new file, "mymath.h", and
  write the following in it:
  +-----------------------------------------+
  | #ifndef MYMATH_H                        |
  | #define MYMATH_H                        |
  |                                         |
  | /* Function prototypes */               |
  | double add     ( double, double );      |
  | double subtract( double, double );      |
  | double multiply( double, double );      |
  | double divide  ( double, double );      |
  |                                         |
  | #endif                                  |
  +-----------------------------------------+
  The reason for the #ifndef, etc., is to avoid the possibility of importing
  the header file more than once into the same source file (which would result
  in errors about having multiple definitions of the same functions). You can
  treat the first two lines and the last line as boiler-plate code that you
  should include in all your header files.

> Now change mymath_program.c so that it includes the header file instead of
  the source file:

    #include "mymath.h"

  Now, when we do the first stage of compiling for mymath_program.c, only the
  parts source code in our main function will be compiled into binary, because
  mymath_program.c can't "see" the source code for the functions, and can only
  see the function prototypes.

  $ gcc -c mymath_program.c

> At this point, you should have two object files:
    1) mymath.o
    2) mymath_program.o
  Let's link them together:

  $ gcc mymath_program.o mymath.o -o mymath_program

> And now we've done the whole compilation "manually", as it were. The command

  $ gcc mymath_program.c mymath.c -o mymath_program

  is actually doing all the steps in one fell swoop.

> (Optional:) To see how you would do this in a Makefile, open up the file
  Makefile-mymath and study the code and the accompanying comments.

======================================
Act 2: Making libraries for later use
======================================

> As we've seen, the object files contain the binary translation of all your
  functions. Suppose someone wanted to write a program that makes use of the
  functions you have written, but you didn't want to give them the source
  code. Assuming they were working on the same computer architecture as you,
  you would only have to give them the header file with the function proto-
  types, and the already-compiled object files.

> This is, in fact, what happens. The only difference is that instead of ship-
  ping the object files as is, they are first bundled together into a single
  file called a library. You can recognise library files because their names
  follow the following convention. They are prefaced with "lib", and their
  extension is either .a or .so depending on whether they are a "static" or
  a "shared" library, respectively. For the purposes of this tutorial, we
  won't be discussing the difference between the two types of libraries, but
  we will just make a "static" library (the default).

> The *nix utility for bundling object files into libraries is called "ar"
  (short for "archiver"). Its first argument is a string of letters that
  tell the archiver what you want to do with it. The full list can be seen
  in the man page for ar, but here are the highlights:

    r: insert into archive
    c: create a new archive
    s: add or update the archive index

  So the command for adding the object file "mymath.o" to a new archive is

  $ ar rcs libmymath.a mymath.o

  Now you have the file libmymath.a which you can ship with your header file
  to anyone who wants to write code based on your work.

> Now we will see how to use someone else's library in OUR code. Once you've
  successfully made the mymath library, go ahead and delete the source code
  file mymath.c (don't worry, if you ever want to get it back, you can always
  write "git checkout mymath.c" and it will be magically restored!). Also, get
  rid of any object files.

  $ rm mymath.c
  $ rm *.o

  Now, the only place the definitions exist for our add/subtract/etc functions
  is in the library file libmymath.a.

> We can now try to recompile mymath_program, using the library. The gcc
  option for linking to libraries is "-l".

  IMPORTANT: The argument that you pass to -l is NOT the name of the library
             file itself, but the "middle bit" of it, i.e. without the "lib"
             prefix and without the ".a" ending.

  So, our command for compiling mymath_program and linking the functions we've
  called in it to the functions defined in the library is:

  $ gcc -o mymath_program mymath_program.c -L. -lmymath

  The -L option is used to tell the linker where to look for the libraries (if
  it can't find them in the usual places, /usr/lib, /usr/share/lib, etc.). The
  dot after the -L just means "this directory".

> (Optional:) To see how you can do this in a Makefile, open up the file
  Makefile-library and study the code and the accompanying comments.

==============================
Act 3: Dealing with segfaults
==============================

> Open up segfault.c to see a program that will attempt to access a forbidden
  memory address (namely, memory address 0x00).

> Compile it using all the warning options:

  $ gcc -o segfault segfault.c -Wall -Wextra

  Notice that no warnings were given!

> Run the program and experience the joy of getting a segfault!

  $ ./segfault

> Since the segfault happened without any hint of where, or why, it happened,
  they can be difficult to debug. The most basic approach you can take is to
  insert printf statements throughout your code to try and figure out when it
  crashes. This is usually not the most efficient approach, but can be useful
  for a first-order analysis.

  Inbetween the four lines of code in the main() function of segfault.c, add a
  unique printf statement, e.g.

    fprintf( stderr, "checkpoint 1\n" );
    fprintf( stderr, "checkpoint 2\n" );
    etc.

  Notice that I'm using fprintf instead of printf. fprintf is the same as
  printf, except that you can specify which file stream to write to. In fact,
  printf is the same as fprintf( stdout, ... ).

  Now compile and run the code again, and you should see that the last printed
  output is the one that you inserted just before the line

    int i = *ptr;

> A better way to debug a segfault is to use a bona fide IDE (Integrated
  Development Environment), such as Eclipse, which have built in debuggers
  that allow you to run your code line by line, and you will immediately
  know where the error occurred.

> A third option is to use a few of the fancier
