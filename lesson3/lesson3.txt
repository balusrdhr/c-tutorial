+----------------------------------------------------------------------------+
| Lesson #3: Preprocessor directives, macros, OpenMP, the C Standard Library |
+----------------------------------------------------------------------------+

==========================================
Act 1: Preprocessor directives and macros
==========================================

> We've talked about the two stages of compiling in the previous lesson:
    1) compiling (i.e. converting your code into binary, aka "assembling")
    2) linking
  But there is actually a preparation stage that happens before any of that,
  which is called the pre-processing stage. What happens in this stage is that
  it converts all of your preprocessor directives (which is any line that
  begins with a '#') into code. Only then is the resulting code actually
  passed on to the compiler.

> The program check_system.c is full of preprocessor directives, and we will
  go through it to see how they work. But first, let's compile and run it:

  $ gcc -Wall -Wextra check_system.c -o check_system
  $ ./check_system

  You should find that the program behaves differently depending on what
  system you're using (Windows, Mac, or Linux).

> Open check_system.c and go through the code (and comments) to learn about
  the more common types of preprocessor directives and how to use them.

> Now let's define the VERBOSE token from the command line, using gcc's -D
  option:

  $ gcc -DVERBOSE -Wall -Wextra check_system.c -o check_system
  $ ./check_system

==============
Act 2: OpenMP
==============

> This is not an OpenMP tutorial, so we won't go into any detail here. Kristof
  has very kindly allowed me to use his code for the solution to the
  programming challenge to demonstrate how to use OpenMP in C code.

> The original code is in q14.c, which can be compiled and run with

  $ gcc -Wall -Wextra q14.c -o q14
  $ ./q14

  The authors of OpenMP have designed it so that everything is accomplished
  with #pragma directives. Compare the differences between q14.c and
  q14-openmp.c.

> Compiling OpenMP code requires that you:
    1) #include <omp.h>
    2) supply the -fopenmp argument to gcc

> Compile and run it with

  $ gcc -Wall -Wextra -fopenmp q14-openmp.c -o q14-openmp
  $ ./q14-openmp

 - C man pages

===============================================
Act 4: Interfacing with Python (Steven Murray)
===============================================

