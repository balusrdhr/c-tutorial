+-----------------------------------+
| Lesson #1: Pointers and Compiling |
+-----------------------------------+

===========================================
Act 1: Compiling and Makefiles
===========================================

> Download repo from
  (SSH):   git@github.com:robotopia/c-tutorial.git
  (HTTPS): https://github.com/robotopia/c-tutorial.git

> Navigate to lesson1 directory

> Open hello_world.c in your favourite editor and work through the code
  and comments to understand how this program works.

> Compile by running:
  $ gcc hello_world.c
  Test result by running:
  $ ./a.out

> Give the compiler the -o option to change the name of your output binary:
  $ gcc -o hello_world hello_world.c

> Create a Makefile for compiling hello_world.c:
  $ vi Makefile # (or use your favourite text editor)

  Makefile contents:
  +-------------------------------+
  |hello_world: hello_world.c     |
  |    gcc -o $@ $<               |
  +-------------------------------+
    ^-- Make sure there is a single tab character ('\t') before 'gcc'

  To see a basic explanation for Makefiles, see the files
    1) Makefile-explanation, and
    2) Makefile-advanced

> First remove existing hello_world binary
  $ rm -f hello_world

  and then run
  $ make

  to compile the hello_world program with the Makefile

> Finally, use my pre-prepared Makefile to compile all the programs in
  this lesson:
  $ cp Makefile-advanced Makefile
  $ make

===========================================
Act 2: Dealing with compiler errors
===========================================

> In your Makefile, add hello_world_err to your TARGETS

> Try to compile hello_world_err by running
  $ make

> Rule of thumb: start from top of error/warning list and work down. Sometimes
  fixing one error solves later errors.

> Format of error message:
  {file}:{line_no}:{col_no}: warning/error: {error message}
      {context for error}

> Work through the examples of errors listed in the file "error.txt". These
  may not look identical to yours, since they're obviously compiler-dependent.
  Upon applying each solution, recompile with 'make'.

===========================================
Act 3: C as a memory-manipulation language
===========================================

> Open stack_memory.c

> Uncomment, in turn, each "example" function in main, recompiling (by running
  'make' each time), and working through the code, the comments, and the
  program output.

> Open heap_memory.c

> Uncomment, in turn, each "example" function in main, recompiling (by running
  'make' each time), and working through the code, the comments, and the
  program output.

===========================================
Act 4: File I/O and "online" documentation
===========================================

> Open fileio.c and work through the code and the accompanying comments.

===========================================
HOMEWORK:
===========================================

Write a program that reads in one of the output files from the fileio.c
program, squares it, and prints the result to stdout.

